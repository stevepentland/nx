// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`app --minimal should create default application without Nx welcome component 1`] = `
"
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import styles from './app.module.css';



export function App() {

  return (
    <div>
      
      <h1>
        <span> Hello there, </span>
        Welcome plain ðŸ‘‹
      </h1>
     
    </div>);

}


export default App;

 
if (import.meta.vitest) {
  // add tests related to your file here
  // For more information please visit the Vitest docs site here: https://vitest.dev/guide/in-source.html
  
  const { it, expect, beforeEach } = import.meta.vitest;
  let render: typeof import('@testing-library/react').render;

  beforeEach(async () => {
    render = (await import('@testing-library/react')).render;
  });

  
it('should render successfully', () => {
  const { baseElement } = render(<App />);
  expect(baseElement).toBeTruthy();
});

it('should have a greeting as the title', () => {
  const { getByText } = render(<App />);
  expect(getByText(/Welcome plain/gi)).toBeTruthy();
});

}
 
"
`;

exports[`app --style @emotion/styled should exclude styles 1`] = `
"
const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: [],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};

"
`;

exports[`app --style @emotion/styled should not break if bundler is vite 1`] = `
"
      /// <reference types='vitest' />
      import { defineConfig } from 'vite';
      import react from '@vitejs/plugin-react';
      import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
      
      export default defineConfig({
        root: __dirname,
        cacheDir: '../node_modules/.vite/my-app',
        
    server:{
      port: 4200,
      host: 'localhost',
    },
        
    preview:{
      port: 4300,
      host: 'localhost',
    },
        
        plugins: [react(),
nxViteTsPaths()],
        
    // Uncomment this if you are using workers. 
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
        
    build: {
      outDir: '../dist/my-app',
      emptyOutDir: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
    
        
        
      });"
`;

exports[`app --style none should exclude styles 1`] = `
"
const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: [],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};

"
`;

exports[`app --style none should not break if bundler is vite 1`] = `
"
      /// <reference types='vitest' />
      import { defineConfig } from 'vite';
      import react from '@vitejs/plugin-react';
      import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
      
      export default defineConfig({
        root: __dirname,
        cacheDir: '../node_modules/.vite/my-app',
        
    server:{
      port: 4200,
      host: 'localhost',
    },
        
    preview:{
      port: 4300,
      host: 'localhost',
    },
        
        plugins: [react(),
nxViteTsPaths()],
        
    // Uncomment this if you are using workers. 
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
        
    build: {
      outDir: '../dist/my-app',
      emptyOutDir: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
    
        
        
      });"
`;

exports[`app not nested should add vite types to tsconfigs 1`] = `
"
      /// <reference types='vitest' />
      import { defineConfig } from 'vite';
      import react from '@vitejs/plugin-react';
      import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
      
      export default defineConfig({
        root: __dirname,
        cacheDir: '../node_modules/.vite/my-app',
        
    server:{
      port: 4200,
      host: 'localhost',
    },
        
    preview:{
      port: 4300,
      host: 'localhost',
    },
        
        plugins: [react(),
nxViteTsPaths()],
        
    // Uncomment this if you are using workers. 
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
        
    build: {
      outDir: '../dist/my-app',
      emptyOutDir: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
    
        
        test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    }
  },
      });"
`;

exports[`app not nested should generate files 1`] = `
"// eslint-disable-next-line @typescript-eslint/no-unused-vars
import styles from './app.module.css';

import NxWelcome from './nx-welcome';

export function App() {
  return (
    <div>
      <NxWelcome title="my-app" />
    </div>
  );
}

export default App;
"
`;

exports[`app not nested should setup playwright correctly for vite 1`] = `
"import { defineConfig, devices } from '@playwright/test';
import { nxE2EPreset } from '@nx/playwright/preset';

import { workspaceRoot } from '@nx/devkit';

// For CI, you may want to set BASE_URL to the deployed application.
const baseURL = process.env['BASE_URL'] || 'http://localhost:4300';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// require('dotenv').config();

/**
 * See https://playwright.dev/docs/test-configuration.
 */
export default defineConfig({
  ...nxE2EPreset(__filename, { testDir: './src' }),
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    baseURL,
    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on-first-retry',
  },
  /* Run your local dev server before starting the tests */
  webServer: {
    command: 'npx nx run my-app:preview',
    url: 'http://localhost:4300',
    reuseExistingServer: !process.env.CI,
    cwd: workspaceRoot
  },
  projects: [
    {
      name: "chromium",
      use: { ...devices["Desktop Chrome"] },
    },

    {
      name: "firefox",
      use: { ...devices["Desktop Firefox"] },
    },

    {
      name: "webkit",
      use: { ...devices["Desktop Safari"] },
    },
    
    // Uncomment for mobile browsers support
    /* {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    }, */

    // Uncomment for branded browsers
    /* {
      name: 'Microsoft Edge',
      use: { ...devices['Desktop Edge'], channel: 'msedge' },
    },
    {
      name: 'Google Chrome',
      use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    } */
  ],
});
"
`;

exports[`app not nested should use preview vite types to tsconfigs 1`] = `
"
      /// <reference types='vitest' />
      import { defineConfig } from 'vite';
      import react from '@vitejs/plugin-react';
      import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
      
      export default defineConfig({
        root: __dirname,
        cacheDir: '../node_modules/.vite/my-app',
        
    server:{
      port: 4200,
      host: 'localhost',
    },
        
    preview:{
      port: 4300,
      host: 'localhost',
    },
        
        plugins: [react(),
nxViteTsPaths()],
        
    // Uncomment this if you are using workers. 
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
        
    build: {
      outDir: '../dist/my-app',
      emptyOutDir: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
    
        
        test: {
    watch: false,
    globals: true,
    environment: 'jsdom',
    include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
    
    reporters: ['default'],
    coverage: {
      reportsDirectory: '../coverage/my-app',
      provider: 'v8',
    }
  },
      });"
`;

exports[`app setup React app with --bundler=vite should setup targets with vite configuration 1`] = `null`;

exports[`app should add custom webpack config 1`] = `
"
const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: ["./src/styles.css"],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};

"
`;

exports[`app should create Nx specific template 1`] = `
"
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import styles from './app.module.css';

import NxWelcome from "./nx-welcome";



export function App() {

  return (
    <div>
      
      <NxWelcome title="my-app"/>
     
    </div>);

}


export default App;


"
`;

exports[`app should setup vite if bundler is vite 1`] = `
"
      /// <reference types='vitest' />
      import { defineConfig } from 'vite';
      import react from '@vitejs/plugin-react';
      import { nxViteTsPaths } from '@nx/vite/plugins/nx-tsconfig-paths.plugin';
      
      export default defineConfig({
        root: __dirname,
        cacheDir: '../node_modules/.vite/my-app',
        
    server:{
      port: 4200,
      host: 'localhost',
    },
        
    preview:{
      port: 4300,
      host: 'localhost',
    },
        
        plugins: [react(),
nxViteTsPaths()],
        
    // Uncomment this if you are using workers. 
    // worker: {
    //  plugins: [ nxViteTsPaths() ],
    // },
        
    build: {
      outDir: '../dist/my-app',
      emptyOutDir: true,
      reportCompressedSize: true,
      commonjsOptions: {
        transformMixedEsModules: true,
      },
    },
    
        
        
      });"
`;

exports[`app should setup webpack 1`] = `
"
const { NxAppWebpackPlugin } = require('@nx/webpack/app-plugin');
const { NxReactWebpackPlugin } = require('@nx/react/webpack-plugin');
const { join } = require('path');

module.exports = {
  output: {
    path: join(__dirname, '../dist/my-app'),
  },
  devServer: {
    port: 4200
  },
  plugins: [
    new NxAppWebpackPlugin({
      tsConfig: './tsconfig.app.json',
      compiler: 'babel',
      main: './src/main.tsx',
      index: './src/index.html',
      baseHref: '/',
      assets: ["./src/favicon.ico","./src/assets"],
      styles: ["./src/styles.css"],
      outputHashing: process.env['NODE_ENV'] === 'production' ? 'all' : 'none',
      optimization: process.env['NODE_ENV'] === 'production',
    }),
    new NxReactWebpackPlugin({
      // Uncomment this line if you don't want to use SVGR
      // See: https://react-svgr.com/
      // svgr: false
    }),
  ],
};

"
`;
